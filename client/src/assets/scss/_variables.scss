@import "../../../node_modules/bootstrap/scss/functions";
@import "../../../node_modules/bootstrap/scss/variables";
@import "../../../node_modules/bootstrap/scss/variables-dark";
@import "../../../node_modules/bootstrap/scss/maps";
@import "../../../node_modules/bootstrap/scss/mixins";
@import "../../../node_modules/bootstrap/scss/utilities";

$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
    xxxl: 1560px
);

$light-theme: (
    "primary": #336fe7,
    "secondary": #1c3e82,
    "success": #32ce49,
    "info": #f5f5f5,
    "warning": #f7c32e,
    "danger": #d6293e,
    "text": #f6d9ee,
    "page": #ffffff,
    "dark": #7f7f7f,
    "white": #EBE9FC
);

$dark-theme: (
    "primary": #ff22ff,
    "secondary": #2fff9a,
    "success": #aa49f9,
    "info": #01efb6,
    "warning": #ffda6a,
    "danger": #ea868f,
    "text": #b1aafa,
    "page": #0a081b,
    "dark": #f6d9ee,
    "body-bg": #020314
);

$default-colors: (
    "primary": $primary,
    "secondary": $secondary,
    "success": $success,
    "info": $info,
    "warning": $warning,
    "danger": $danger,
    "white": $white,
    "light": $light,
    "dark": $dark,
    "accent": #8217fc,
    "bg": #080a0d
);

@import "bootstrap";

@mixin generate-theme-properties($theme, $overrides-colors) {
    $theme-colors: map-merge($default-colors, $overrides-colors);

    @each $color, $value in $theme-colors {
        $color-variation: 35%;
        $shade-amount: 60%;

        --#{$variable-prefix}#{$color}: #{$value};
        --#{$variable-prefix}#{$color}-text-emphasis: #{if(
 $theme =="light",
        shade-color($value, $shade-amount),
        tint-color($value, $shade-amount))
    }

    ;
    --#{$variable-prefix}#{$color}-bg-subtle: #{if(
 $theme =="light",
    lighten($value, $color-variation),
    darken($value, $color-variation))
}

;
--#{$variable-prefix}#{$color}-border-subtle: #{if(
 $theme =="light",
lighten($value, calc($color-variation / 2)),
darken($value, calc($color-variation / 2)))
}

;

.text-#{$color} {
    color: #{$value};
}

.border-#{$color} {
    --bs-border-color: #{$value};
}

.outline {
    outline-style: var(--bs-outline-style, solid);
    outline-width: var(--bs-outline-width, 1px);
    outline-color: var(--bs-outline-color, var(--bs-primary));
}

.outline-#{$color} {
    --bs-outline-color: #{$value};
}
}

// Redefine theme color rgb vars (used for bg- colors)
$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");

@each $color, $value in $theme-colors-rgb {
    --#{$variable-prefix}#{$color}-rgb: #{$value};

    .bg-#{$color} {
        background-color: rgba($value, var(--bs-bg-opacity));
    }

    .focus-ring-#{$color} {
        --bs-focus-ring-color: rgba(#{$value}, .25);
    }
}

@each $color, $value in $theme-colors {
    .btn-#{$color} {
        @if $theme =="light" {
            @include button-variant($value,
                $value,
                $hover-background: shade-color($value, $btn-hover-bg-shade-amount),
                $hover-border: shade-color($value, $btn-hover-border-shade-amount),
                $active-background: shade-color($value, $btn-active-bg-shade-amount),
                $active-border: shade-color($value, $btn-active-border-shade-amount),
                $disabled-background: transparentize($value, .25),
                $disabled-border: transparentize($value, .25),
            );
        }

        @else if $theme =="dark" {
            @include button-variant($value,
                $value,
                $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
                $hover-border: tint-color($value, $btn-hover-border-tint-amount),
                $active-background: tint-color($value, $btn-active-bg-tint-amount),
                $active-border: tint-color($value, $btn-active-border-tint-amount),
                $disabled-background: transparentize($value, .25),
                $disabled-border: transparentize($value, .25),
            );
        }

        @else {
            @include button-variant($value, $value);
        }
    }
}

@each $color, $value in $theme-colors {
    .btn-outline-#{$color} {
        @include button-outline-variant($value);
    }
}
}

[data-bs-theme="light"] {
    @include generate-theme-properties("light", $light-theme);
}

[data-bs-theme="dark"] {
    @include generate-theme-properties("dark", $dark-theme);
}

@debug "[sass_success] Themes_Built";